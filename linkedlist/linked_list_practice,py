class Node:
    def __init__(self, value, next_node=None):
        # Node initialization: stores a value and a reference to the next node
        self.value = value
        self.next_node = next_node
    
    def get_value(self):
        # Returns the value stored in the node
        return self.value
  
    def get_next_node(self):
        # Returns the reference to the next node
        return self.next_node
  
    def set_next_node(self, next_node):
        # Updates the reference to the next node
        self.next_node = next_node

class LinkedList:
    def __init__(self, value=None):
        # Initializes the LinkedList with a head node
        self.head_node = Node(value)
  
    def get_head_node(self):
        # Returns the head node of the list
        return self.head_node
  
    def insert_beginning(self, new_value):
        # Inserts a new node at the beginning of the list
        new_node = Node(new_value)
        new_node.set_next_node(self.head_node)
        self.head_node = new_node
    
    def stringify_list(self):
        # Creates a string representation of the list
        string_list = ""
        current_node = self.get_head_node()
        while current_node:
            if current_node.get_value() != None:
                string_list += str(current_node.get_value()) + "\n"
            current_node = current_node.get_next_node()
        return string_list
  
    def remove_node(self, value_to_remove):
        # Removes a node with the specified value from the list
        current_node = self.get_head_node()
        if current_node.get_value() == value_to_remove:
            self.head_node = current_node.get_next_node()
        else:
            while current_node:
                next_node = current_node.get_next_node()
                if next_node and next_node.get_value() == value_to_remove:
                    current_node.set_next_node(next_node.get_next_node())
                    break  # Node found and removed, exit the loop
                else:
                    current_node = next_node

# Creating and using the LinkedList
my_linked_list = LinkedList()
my_linked_list.insert_beginning("first value")
my_linked_list.insert_beginning("second value")
print(my_linked_list.stringify_list())
